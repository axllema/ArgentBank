swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '2.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
  Transaction:
    type: object
    properties:
      id:
        type: integer
      userId:
        type: integer
      description:
        type: string
      amount:
        type: number
      date:
        type: string
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
      # - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

### Nouvelles routes ajoutées - dans api/v2
    ## CRUD pour les transactions

  ## Route pour récupérer toutes les transactions de l'utilisateur pour le mois en cours
  /transactions/current/{accountId}:
      get:
        tags:
        # Tag indiquant le module auquel appartient cette route
          - Transaction Module 
        summary: Get Current User's Transactions
        description: Retrieve all transactions for the current user for the current month.
        parameters:
        # Paramètre de requête pour filtrer les transactions par utilisateur
        - name: accountId
          in: path
          description: ID of the account to retrieve transactions for.
          required: true
          type: integer
        - name: userId
          in: query
          description: ID of the user whose transactions to retrieve.
          required: true
          type: integer
        produces:
          - application/json
        responses:
          '200':
            description: Transactions retrieved successfully
            schema:
              type: object
              properties:
                transactions:
                  type: array
                  items:
                    $ref: '#/definitions/Transaction'
            examples:
              application/json:
                #  Transactions regroupées par compte
                groupedByAccount: 
                  account1:
                    - id: "123"
                      userId: 456
                      description: "Example transaction 1"
                      amount: 100.0
                      date: "2024-03-15"
                    - id: "124"
                      userId: 456
                      description: "Example transaction 2"
                      amount: 50.0
                      date: "2024-03-16"
                  account2:
                    - id: "125"
                      userId: 456
                      description: "Example transaction 3"
                      amount: 75.0
                      date: "2024-03-18"
          '400':
            description: Invalid Request
          '404':
            description: User not found
          '500':
            description: Internal Server Error

  ## Route pour manipuler une transaction spécifique
  /transactions/{transactionId}:
  # Route pour récupérer une transaction spécifique
    get:
      tags:
        - Transaction Module
      summary: Get Transaction Details
      description: Retrieve details of a specific transaction.
      parameters:
      # Paramètre de chemin pour récupérer une transaction spécifique
        - name: transactionId
          in: path
          description: ID of the transaction to retrieve
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: Transaction details retrieved successfully.
          schema:
            $ref: '#/definitions/Transaction'
          examples:
            application/json:
                id: 123
                userId: 456
                description: "Sample transaction"
                amount: 100.0
                date: "2024-03-15"
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error
    # Route pour ajouter/modifier les détails d'une transation spécifique 
    put:
      tags:
        - Transaction Module
      summary: Update Transaction Details
      description: Add or update details of a specific transaction.
      parameters:
      # Paramètre de chemin pour mettre à jour (ajouter/modifier les détails) une transaction spécifique
        - name: transactionId
          in: path
          description: ID of the transaction to update
          required: true
          type: integer
        - in: body
          name: body
          description: Transaction details to update
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction details updated successfully.
          schema:
            $ref: '#/definitions/Transaction'
          examples:
            application/json:
                description: "description updated"
        '400':
          description: Invalid Request
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error